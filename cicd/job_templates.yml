.build_template:
    stage: build
    image: docker:25.0.3
    services:
        - docker:25.0.3-dind
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - '[ -z "$AWS_ACCESS_KEY_ID" ] && echo "Missing AWS_ACCESS_KEY_ID" && exit 1'
        - '[ -z "$AWS_SECRET_ACCESS_KEY" ] && echo "Missing AWS_SECRET_ACCESS_KEY" && exit 1'
        - '[ -z "$AWS_REGION" ] && echo "Missing AWS_REGION" && exit 1'
        - '[ -z "$gitlab_env" ] && echo "Missing gitlab_env" && exit 1'
        - apk add --no-cache bash zip
    script:
        - bash util/zip_lambda.sh
    artifacts:
        paths:
            - artifacts/lambda.zip
        expire_in: 1h

.validate_network_template:
    stage: validate
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/network
        - tofu init $TF_BACKEND_CONFIG
        - tofu validate

.validate_db_template:
    stage: validate
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/db
        - tofu init $TF_BACKEND_CONFIG
        - tofu validate

.validate_app_template:
    stage: validate
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/app
        - tofu init $TF_BACKEND_CONFIG
        - tofu validate

.plan_network_template:
    stage: plan
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/network
        - tofu init $TF_BACKEND_CONFIG
        - tofu plan -out="../../artifacts/${gitlab_env}-network.tfplan" -var="gitlab_env=${gitlab_env}"
    artifacts:
        paths:
            - "artifacts/${gitlab_env}-network.tfplan"
        expire_in: 6 hours

.plan_db_template:
    stage: plan
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/db
        - tofu init $TF_BACKEND_CONFIG
        - tofu plan -out="../../artifacts/${gitlab_env}-db.tfplan" -var="gitlab_env=${gitlab_env}"
    artifacts:
        paths:
            - "artifacts/${gitlab_env}-db.tfplan"
        expire_in: 6 hours

.plan_app_template:
    stage: plan
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/app
        - tofu init $TF_BACKEND_CONFIG
        - tofu plan -out="../../artifacts/${gitlab_env}-app.tfplan" -var="gitlab_env=${gitlab_env}"
    artifacts:
        paths:
            - "artifacts/${gitlab_env}-app.tfplan"
        expire_in: 6 hours

.apply_network_template:
    stage: apply
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/network
        - tofu init $TF_BACKEND_CONFIG
        - tofu apply "../../artifacts/${gitlab_env}-network.tfplan"

.apply_db_template:
    stage: apply
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/db
        - tofu init $TF_BACKEND_CONFIG
        - tofu apply "../../artifacts/${gitlab_env}-db.tfplan"

.apply_app_template:
    stage: apply
    image:
        name: oowy/opentofu:1.9.1-alpine3.20
    script:
        - cd infra/app
        - tofu init $TF_BACKEND_CONFIG
        - tofu apply "../../artifacts/${gitlab_env}-app.tfplan"


#TODO
.db_setup_template:
    stage: apply
    image: postgres:15
    variables:
        DB_HOST: $DB_HOST
        DB_PORT: $DB_PORT
        DB_USER: $DB_USER
        DB_PASS: $DB_PASS
        DB_NAME: $DB_NAME
    script:
        - echo "Running schema.sql..."
        - PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f infra/db/schema.sql
        - echo "Running _seed_dummy_data.sql..."
        - PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f infra/db/_seed_dummy_data.sql
    rules:
        - if: '$DB_HOST && $DB_USER && $DB_PASS && $DB_NAME'
